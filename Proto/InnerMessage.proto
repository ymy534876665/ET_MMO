syntax = "proto3";
package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 InstanceId = 2;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 90;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Id = 1;
	string Address = 2;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Id = 1;
	string Address = 2;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 InstanceId = 2;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 InstanceId = 2;
	int32 Time = 3;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 OldInstanceId = 2;
	int64 InstanceId = 3;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 InstanceId = 1;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 90;
	string Account = 1;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Key = 1;
	int64 GateId = 2;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 NewInstanceId = 4;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 90;
}


//ResponseType Name2G_CheckName
message G2Name_CheckName // IActorRequest
{
	int32 RpcId = 90;

	string Name = 1;
	int64 UnitId = 2;
}

message Name2G_CheckName //IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}



//ResponseType Queue2G_EnQueue
message G2Queue_EnQueue //IActorRequest
{
	int32 RpcId = 90;

	int64 UnitId = 1;
	string Account = 2;
	int64 GateActorId = 3;
}


message Queue2G_EnQueue //IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	bool NeedQueue = 1;
	int32 Index = 2;
	int32 Count = 3;
}

//ResponseType Queue2G_EnterMap
message Queue2G_EnterMap //IActorRequest
{
	int32 RpcId = 90;


	string Account = 1;
	int64 UnitId = 2;
}

message G2Queue_EnterMap //IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
    
    bool NeedRemove = 1;
}

message Queue2G_UpdateInfo //IActorMessage
{
	int32 RpcId = 90;

	repeated string Account = 1;
	repeated int32 Index = 2;
	int32 Count = 3;
}


message G2Queue_Disconnect  //IActorMessage
{
	int32 RpcId = 90;

	int64 UnitId = 1;

	bool Protect = 2;
}




